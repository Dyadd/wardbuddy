"""Gradio interface"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_learning_interface.ipynb.

# %% auto 0
__all__ = ['logger', 'launch_learning_interface', 'write_css']

# %% ../nbs/02_learning_interface.ipynb 4
from typing import Dict, List, Optional, Tuple, Any
import gradio as gr
import logging
from pathlib import Path
import asyncio
from .clinical_tutor import ClinicalTutor
from .utils import format_response
from .learning_context import setup_logger


logger = setup_logger(__name__)

# %% ../nbs/02_learning_interface.ipynb 9
async def launch_learning_interface(
    port: Optional[int] = None,
    context_path: Optional[Path] = None,
    share: bool = False,
    theme: str = "default"
) -> None:
    """
    Launch the learning interface application.
    
    Args:
        port: Optional port number
        context_path: Optional path for context persistence
        share: Whether to create a public link
        theme: Gradio theme name
    """
    try:
        interface = LearningInterface(context_path, theme)
        app = interface.create_interface()
        app.launch(
            server_port=port,
            share=share
        )
        logger.info(f"Interface launched on port: {port}")
    except Exception as e:
        logger.error(f"Error launching interface: {str(e)}")
        raise


# %% ../nbs/02_learning_interface.ipynb 11
def write_css():
    """Create custom CSS file for the interface"""
    css = """
    .gr-button {
        border-radius: 8px;
        padding: 10px 20px;
    }
    
    .gr-button:hover {
        background-color: #2c5282;
        color: white;
    }
    
    .message {
        padding: 15px;
        border-radius: 10px;
        margin: 5px 0;
    }
    
    .user-message {
        background-color: #e2e8f0;
    }
    
    .assistant-message {
        background-color: #ebf8ff;
    }
    """
    
    with open("styles.css", "w") as f:
        f.write(css)

