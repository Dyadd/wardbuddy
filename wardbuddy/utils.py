"""Shared utilities for the entire learning system"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_utils.ipynb.

# %% auto 0
__all__ = ['format_response', 'load_json_safely']

# %% ../nbs/03_utils.ipynb 4
from typing import Dict, List, Optional, Any, Tuple
import json
from pathlib import Path

# %% ../nbs/03_utils.ipynb 6
def format_response(response: Dict[str, Any]) -> str:
    """
    Format tutor response for display.
    
    Args:
        response: Raw response dictionary
        
    Returns:
        str: Formatted response text
    """
    parts = []
    
    if 'feedback' in response:
        parts.append(f"Feedback:\n{response['feedback']}")
    
    if 'learning_points' in response:
        points = '\n'.join(f'• {point}' for point in response['learning_points'])
        parts.append(f"\nKey Learning Points:\n{points}")
    
    if 'suggestions' in response:
        suggestions = '\n'.join(f'• {s}' for s in response['suggestions'])
        parts.append(f"\nSuggestions:\n{suggestions}")
    
    if 'connections' in response and response['connections']:
        connections = '\n'.join(f'• {c}' for c in response['connections'])
        parts.append(f"\nConnections to Previous Cases:\n{connections}")
    
    return '\n\n'.join(parts)

# %% ../nbs/03_utils.ipynb 7
def load_json_safely(path: Path) -> Dict:
    """
    Safely load JSON file with error handling.
    
    Args:
        path: Path to JSON file
        
    Returns:
        dict: Loaded JSON data
        
    Raises:
        ValueError: If file is invalid
    """
    try:
        with open(path, 'r') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON file: {str(e)}")
    except Exception as e:
        raise ValueError(f"Error loading file: {str(e)}")
